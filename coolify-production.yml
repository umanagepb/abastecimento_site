# Configuração otimizada para Coolify - PRODUÇÃO
# Versão com health checks tolerantes e configurações para ambiente de produção

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: abastecimento-db
    environment:
      POSTGRES_DB: abastecimento
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost -p 5432 || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 90s
    restart: unless-stopped
    networks:
      - abastecimento
    shm_size: 256mb
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # API Backend
  api:
    build:
      context: ./abastecimento_api
      dockerfile: Dockerfile
    container_name: abastecimento-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:5004
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - ConnectionStrings__ConnectionString=XpoProvider=Postgres;User ID=postgres;Password=${DB_PASSWORD};Server=postgres;Port=5432;Database=abastecimento
      - Authentication__Jwt__Audience=${JWT_AUDIENCE}
      - Authentication__Jwt__IssuerSigningKey=${JWT_SIGNING_KEY}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=abastecimento
      - DB_PASSWORD=${DB_PASSWORD}
      - AllowedHosts=*
      # Configurações para DataProtection
      - DataProtection__ApplicationName=AbastecimentoAPI
    volumes:
      - api_keys:/app/keys  # Volume persistente para DataProtection keys
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5004/health || curl -f http://localhost:5004/ || exit 1"]
      interval: 45s
      timeout: 30s
      retries: 5
      start_period: 150s  # Mais tempo para inicialização
    restart: unless-stopped
    networks:
      - abastecimento
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Aplicação Web Blazor
  web:
    build:
      context: ./abastecaonline
      dockerfile: Dockerfile
    container_name: abastecimento-web
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:5003
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - ConnectionStrings__ConnectionString=XpoProvider=Postgres;User ID=postgres;Password=${DB_PASSWORD};Server=postgres;Port=5432;Database=abastecimento
      - Authentication__Jwt__Audience=${JWT_AUDIENCE}
      - Authentication__Jwt__IssuerSigningKey=${JWT_SIGNING_KEY}
      - ApiUrl=http://api:5004
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=abastecimento
      - DB_PASSWORD=${DB_PASSWORD}
      - AllowedHosts=*
      # Configurações para DataProtection
      - DataProtection__ApplicationName=AbastecimentoWeb
    volumes:
      - web_keys:/app/keys  # Volume persistente para DataProtection keys
    ports:
      - "5003:5003"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5003/health || curl -f http://localhost:5003/ || exit 1"]
      interval: 45s
      timeout: 30s
      retries: 5
      start_period: 180s  # Mais tempo para inicialização do Blazor
    restart: unless-stopped
    networks:
      - abastecimento
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      # Labels para proxy reverso do Coolify
      - "coolify.managed=true"
      - "coolify.name=abastecimento-web"
      - "coolify.domain=${WEB_DOMAIN}"
      - "coolify.port=5003"
      - "coolify.https=true"

volumes:
  postgres_data:
    driver: local
  api_keys:
    driver: local
  web_keys:
    driver: local

networks:
  abastecimento:
    driver: bridge