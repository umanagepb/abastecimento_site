# Configuração para deploy no Coolify
# Este arquivo define os recursos necessários para a aplicação Abastecimento

# INSTRUÇÕES DE CONFIGURAÇÃO NO COOLIFY:
# 1. Crie um novo projeto
# 2. Adicione este repositório Git
# 3. Configure as variáveis de ambiente listadas abaixo
# 4. Execute o deploy

# VARIÁVEIS DE AMBIENTE OBRIGATÓRIAS (Configure no Coolify):
# DB_PASSWORD=sua_senha_postgres_segura
# JWT_AUDIENCE=https://seu-dominio.com  
# JWT_SIGNING_KEY=sua_chave_jwt_secreta_aqui
# API_DOMAIN=api.seu-dominio.com
# WEB_DOMAIN=seu-dominio.com

version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: abastecimento-db
    environment:
      POSTGRES_DB: abastecimento
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - abastecimento

  # API Backend
  api:
    build:
      context: ./abastecimento_api
      dockerfile: Dockerfile
    container_name: abastecimento-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5004
      - ConnectionStrings__ConnectionString=XpoProvider=Postgres;User ID=postgres;Password=${DB_PASSWORD};Server=postgres;Port=5432;Database=abastecimento
      - Authentication__Jwt__Audience=${JWT_AUDIENCE}
      - Authentication__Jwt__IssuerSigningKey=${JWT_SIGNING_KEY}
      - AllowedHosts=*
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - abastecimento

  # Aplicação Web Blazor
  web:
    build:
      context: ./abastecaonline
      dockerfile: Dockerfile
    container_name: abastecimento-web
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5003
      - ConnectionStrings__ConnectionString=XpoProvider=Postgres;User ID=postgres;Password=${DB_PASSWORD};Server=postgres;Port=5432;Database=abastecimento
      - Authentication__Jwt__Audience=${JWT_AUDIENCE}
      - Authentication__Jwt__IssuerSigningKey=${JWT_SIGNING_KEY}
      - ApiUrl=http://api:5004
      - AllowedHosts=*
    ports:
      - "5003:5003"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - abastecimento
    labels:
      # Labels para proxy reverso do Coolify
      - "coolify.managed=true"
      - "coolify.name=abastecimento-web"
      - "coolify.domain=${WEB_DOMAIN}"
      - "coolify.port=5003"
      - "coolify.https=true"

volumes:
  postgres_data:
    driver: local

networks:
  abastecimento:
    driver: bridge