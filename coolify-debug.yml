# Versão de debug do coolify.yml - SEM health checks para debugging
# Use este arquivo temporariamente para identificar problemas

version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: abastecimento-db
    environment:
      POSTGRES_DB: abastecimento
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Health check desabilitado para debug
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U postgres -h localhost -p 5432 || exit 1"]
    #   interval: 15s
    #   timeout: 10s
    #   retries: 15
    #   start_period: 60s
    restart: unless-stopped
    networks:
      - abastecimento
    shm_size: 256mb
    ports:
      - "5432:5432"  # Expor porta para debug

  # API Backend
  api:
    build:
      context: ./abastecimento_api
      dockerfile: Dockerfile
    container_name: abastecimento-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:5004
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - ConnectionStrings__ConnectionString=XpoProvider=Postgres;User ID=postgres;Password=${DB_PASSWORD};Server=postgres;Port=5432;Database=abastecimento
      - Authentication__Jwt__Audience=${JWT_AUDIENCE}
      - Authentication__Jwt__IssuerSigningKey=${JWT_SIGNING_KEY}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=abastecimento
      - DB_PASSWORD=${DB_PASSWORD}
      - AllowedHosts=*
    ports:
      - "5004:5004"
    depends_on:
      - postgres  # Dependência simples, sem health check
    # Health check desabilitado para debug
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5004/health || exit 1"]
    #   interval: 30s
    #   timeout: 15s
    #   retries: 8
    #   start_period: 120s
    restart: unless-stopped
    networks:
      - abastecimento

  # Aplicação Web Blazor
  web:
    build:
      context: ./abastecaonline
      dockerfile: Dockerfile
    container_name: abastecimento-web
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:5003
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - ConnectionStrings__ConnectionString=XpoProvider=Postgres;User ID=postgres;Password=${DB_PASSWORD};Server=postgres;Port=5432;Database=abastecimento
      - Authentication__Jwt__Audience=${JWT_AUDIENCE}
      - Authentication__Jwt__IssuerSigningKey=${JWT_SIGNING_KEY}
      - ApiUrl=http://api:5004
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=abastecimento
      - DB_PASSWORD=${DB_PASSWORD}
      - AllowedHosts=*
    ports:
      - "5003:5003"
    depends_on:
      - api  # Dependência simples, sem health check
    # Health check desabilitado para debug
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5003/health || exit 1"]
    #   interval: 30s
    #   timeout: 15s
    #   retries: 8
    #   start_period: 150s
    restart: unless-stopped
    networks:
      - abastecimento
    labels:
      # Labels para proxy reverso do Coolify
      - "coolify.managed=true"
      - "coolify.name=abastecimento-web"
      - "coolify.domain=${WEB_DOMAIN}"
      - "coolify.port=5003"
      - "coolify.https=true"

volumes:
  postgres_data:
    driver: local

networks:
  abastecimento:
    driver: bridge