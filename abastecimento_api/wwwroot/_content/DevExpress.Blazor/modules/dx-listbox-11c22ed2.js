import{a as e}from"./_tslib-158249d5.js";import{D as t}from"./dx-ui-element-4d613bb9.js";import{R as s}from"./rect-2684652a.js";import{y as i}from"./lit-element-d284a100.js";import{e as o,n}from"./property-ba1fa369.js";import"./data-qa-utils-8be7c726.js";import"./layouthelper-c2462bd3.js";import"./point-9c6ab88a.js";class l extends Event{constructor(){super(l.eventName,{bubbles:!0,composed:!1,cancelable:!0})}}l.eventName="dxlistboxselecteditemschanged";let r=class extends t{constructor(){super(),this.boundSlotChangedHandler=this.onSlotChanged.bind(this),this.displayed=!1,this.isMultipleColumns=!1,this.itemContainerElement=null,this.resizeObserver=new ResizeObserver(this.onResized.bind(this)),this.itemsContainerMutationObserver=new MutationObserver(this.onSelectedItemChanged.bind(this))}connectedCallback(){super.connectedCallback(),this.resizeObserver.observe(this)}disconnectedCallback(){super.disconnectedCallback(),this.resizeObserver.disconnect(),this.itemsContainerMutationObserver.disconnect()}render(){return i`
            <slot @slotchange="${this.boundSlotChangedHandler}">
            </slot>
        `}scrollToFocusedItem(e){var t,s;const i=this.querySelector("[data-is-selected-item]");if(!i)return;const o=this.getScrollableContainerElement(),n=null!==(s=null===(t=this.itemContainerElement)||void 0===t?void 0:t.offsetTop)&&void 0!==s?s:0;!e&&i.offsetTop-o.scrollTop>=n?i.scrollIntoView({block:"nearest"}):o.scrollTop=i.offsetTop-n}onSlotChanged(e){this.itemContainerElement=this.getItemContainerElement(),this.itemsContainerMutationObserver.observe(this.itemContainerElement,{attributeFilter:["data-is-selected-item"],attributeOldValue:!0,subtree:!0})}onResized(e,t){if(e.length<1)return;const i=!s.fromDomRect(e[0].contentRect).isEmpty;i&&!this.displayed&&this.scrollToFocusedItem(!0),this.displayed=i}onSelectedItemChanged(e,t){const s=new l;this.dispatchEvent(s)}getItemContainerElement(){return this.querySelector(this.isMultipleColumns?"table tbody":"ul")}getScrollableContainerElement(){return this.isMultipleColumns?this.querySelector(".dxbs-gridview"):this}};e([o({type:Boolean,attribute:"is-multiple-columns"})],r.prototype,"isMultipleColumns",void 0),r=e([n("dxbl-listbox")],r);const a={loadModule:function(){}};export{r as DxListBox,l as ListBoxSelectedItemsChangedEvent,a as default};
