#!/bin/bash

# Script de verifica√ß√£o da aplica√ß√£o Abastecimento
# Execute este script ap√≥s o deploy para verificar se tudo est√° funcionando

echo "üîç Verificando status da aplica√ß√£o Abastecimento..."
echo "================================================"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar se um servi√ßo est√° rodando
check_service() {
    local service_name=$1
    local url=$2
    local expected_status=${3:-200}
    
    echo -n "Verificando $service_name... "
    
    if command -v curl > /dev/null; then
        response_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null)
        if [ "$response_code" = "$expected_status" ]; then
            echo -e "${GREEN}‚úÖ OK (HTTP $response_code)${NC}"
            return 0
        else
            echo -e "${RED}‚ùå FALHA (HTTP $response_code)${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  curl n√£o dispon√≠vel${NC}"
        return 2
    fi
}

# Fun√ß√£o para verificar container Docker
check_container() {
    local container_name=$1
    echo -n "Verificando container $container_name... "
    
    if docker ps --format "table {{.Names}}" | grep -q "$container_name"; then
        status=$(docker inspect --format='{{.State.Health.Status}}' "$container_name" 2>/dev/null || echo "no-healthcheck")
        if [ "$status" = "healthy" ] || [ "$status" = "no-healthcheck" ]; then
            echo -e "${GREEN}‚úÖ Rodando${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Status: $status${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå N√£o encontrado${NC}"
        return 1
    fi
}

# Fun√ß√£o para verificar conectividade do banco
check_database() {
    echo -n "Verificando banco de dados... "
    
    if docker exec abastecimento-db pg_isready -U postgres > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Conectado${NC}"
        
        # Verificar se o banco existe
        echo -n "Verificando banco 'abastecimento'... "
        if docker exec abastecimento-db psql -U postgres -lqt | cut -d \| -f 1 | grep -qw abastecimento; then
            echo -e "${GREEN}‚úÖ Existe${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Banco n√£o encontrado${NC}"
        fi
    else
        echo -e "${RED}‚ùå N√£o conectado${NC}"
        return 1
    fi
}

# URLs para verifica√ß√£o (ajuste conforme seus dom√≠nios)
WEB_URL="${WEB_DOMAIN:-http://localhost:5003}"
API_URL="${API_DOMAIN:-http://localhost:5004}"

echo "üê≥ Verificando containers Docker..."
echo "-----------------------------------"
check_container "abastecimento-db"
check_container "abastecimento-api"  
check_container "abastecimento-web"

echo ""
echo "üîó Verificando conectividade..."
echo "-------------------------------"
check_database

echo ""
echo "üåê Verificando endpoints HTTP..."
echo "-------------------------------"
check_service "API Health" "$API_URL/health"
check_service "Web Application" "$WEB_URL/health"
check_service "Web Home" "$WEB_URL" 200

echo ""
echo "üìä Status dos recursos..."
echo "------------------------"

# Verificar uso de CPU e mem√≥ria dos containers
if command -v docker > /dev/null; then
    echo "Container Stats:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" \
        abastecimento-db abastecimento-api abastecimento-web 2>/dev/null || echo "Containers n√£o encontrados"
fi

echo ""
echo "üîß Verificando vari√°veis de ambiente..."
echo "--------------------------------------"

required_vars=("DB_PASSWORD" "JWT_AUDIENCE" "JWT_SIGNING_KEY")
for var in "${required_vars[@]}"; do
    if [ -n "${!var}" ]; then
        echo -e "$var: ${GREEN}‚úÖ Configurada${NC}"
    else
        echo -e "$var: ${RED}‚ùå N√£o configurada${NC}"
    fi
done

echo ""
echo "üìù Verificando logs recentes..."
echo "------------------------------"

# Mostrar √∫ltimas linhas dos logs
echo "=== Logs da API (√∫ltimas 5 linhas) ==="
docker logs --tail 5 abastecimento-api 2>/dev/null || echo "Container n√£o encontrado"

echo ""
echo "=== Logs da Web (√∫ltimas 5 linhas) ==="
docker logs --tail 5 abastecimento-web 2>/dev/null || echo "Container n√£o encontrado"

echo ""
echo "‚úÖ Verifica√ß√£o conclu√≠da!"
echo "========================"

# URLs √∫teis
echo ""
echo "üîó URLs da aplica√ß√£o:"
echo "Web Application: $WEB_URL"
echo "API Health Check: $API_URL/health" 
echo "API Swagger: $API_URL/swagger (se habilitado)"

echo ""
echo "üí° Dicas:"
echo "- Se algum servi√ßo falhou, verifique os logs: docker logs <container_name>"
echo "- Para reiniciar um servi√ßo: docker restart <container_name>"
echo "- Para ver todas as vari√°veis: docker exec <container_name> env"